openapi: 3.0.3
info:
  title: Gomoku API
  description: HTTP API for Gomoku Royale board game
  version: 0.0.1
servers:
  - url: 'https://losthost:8080'
    description: Local server
tags:
  - name: Users
    description: Operations about users

  - name: Games
    description: Operations about games

paths:
  /api/users:
    post:
      tags:
        - Users
      summary: Create User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateInputModel'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdOutputModel'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/users/token:
    post:
      tags:
        - Users
      summary: Create Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateTokenInputModel'
      responses:
        '200':
          description: User was logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenCreateOutputModel'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/users/logout:
    post:
      tags:
        - Users
      summary: Logout
      responses:
        '200':
          description: User was successfully logged out
          content:
            text/plain:
              schema:
                type: string
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/users/home:
    get:
      tags:
        - Users
      summary: Get User Home
      responses:
        '200':
          description: Welcome, {username}!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputModel'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get User by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Retrieving user with id {id}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputModel'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/users/stats:
    get:
      tags:
        - Users
      summary: Get Users statistic information
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Retrieved users statistic information successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResult'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/games:
    post:
      tags:
        - Games
      summary: Find Game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantInputModel'
      responses:
        '201':
          description: Created
          content:
            text/plain:
              schema:
                type: string
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/games/{id}:
    get:
      tags:
        - Games
      summary: Get Game by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameOutputModel'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/system:
    get:
      tags:
        - Games
      summary: Get System Info
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfoOutputModel'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/games/{id}/move:
    put:
      tags:
        - Games
      summary: Make a move on the board
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveInputModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
  /api/games/{id}/exit:
    post:
      tags:
        - Games
      summary: Exit Game
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
          headers:
            RequestId:
              $ref: '#/components/headers/RequestId'
components:
  schemas:
    # Input Models
    VariantInputModel:
      type: object
      properties:
        variant:
          type: integer
          example: 1
    MoveInputModel:
      type: object
      properties:
        move:
          type: string
          example: 'c11-W'
    UserCreateTokenInputModel:
      type: object
      properties:
        username:
          type: string
          example: 'username'
        email:
          type: string
          example: 'email@example.com'
        password:
          type: string
          example: 'password'
    UserCreateInputModel:
      type: object
      properties:
        username:
          type: string
          example: 'username'
        email:
          type: string
          example: 'password'
        password:
          type: string

    # Output Models
    IdOutputModel:
      type: object
      properties:
        id:
          type: integer
          example: 1
    UserTokenCreateOutputModel:
      type: object
      properties:
        token:
          type: string
          example: 'ZdIspGWja4mLxRDA9YWUfdJFbwoxyWE5VFb77hs4QeE='
    UserOutputModel:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: 'username'
        email:
          type: string
          example: 'email@example.com'
    GameStateOutputModel:
      type: object
      properties:
        name:
          type: string
          example: 'IN_PROGRESS'
    GameVariantOutputModel:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'FREESTYLE'
        openingRule:
          type: string
          example: 'PRO'
        boardSize:
          type: integer
          example: 15
    BoardOutputModel:
      type: object
      properties:
        grid:
          type: array
          items:
            type: string
            example: 'c11-W'
        turn:
          type: object
          properties:
            player:
              type: string
              example: 'W'
            timeLeftInSec:
              type: integer
              example: 60
    GameOutputModel:
      type: object
      properties:
        id:
          type: integer
          example: 1
        state:
          type: object
          $ref: '#/components/schemas/GameStateOutputModel'
        variant:
          type: object
          $ref: '#/components/schemas/GameVariantOutputModel'
        board:
          type: object
          $ref: '#/components/schemas/BoardOutputModel'
        createdAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00.000Z'
        hostId:
          type: integer
          example: 1
        guestId:
          type: integer
          example: 2
    PaginatedResult:
      type: object
      properties:
        totalItems:
          type: integer
          example: 1
        currentPage:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 1
        items:
          type: array
          items:
            type: object
            example: "{'id': 1, 'username': 'username', 'email': email@example.com}"
    SystemInfoOutputModel:
      type: object
      properties:
        gameName:
          type: string
          example: 'Gomoku Royale'
        version:
          type: string
          example: '0.0.1'
        description:
          type: string
          example: 'Gomoku Royale is a board game ..'
        releaseDate:
          type: string
          example: '2021-01-01'
        authors:
          type: array
          items:
            type: object
            properties:
            firstName:
              type: string
              example: 'John'
            lastName:
              type: string
              example: 'Doe'
            githubUrl:
              type: string
              example: 'www.github.com/johndoe'
    Problem:
      type: object
      properties:
        type:
          type: string
          example: 'https://losthost:8080/api/problems/invalid-username'
        title:
          type: string
          example: 'Invalid username'
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: 'Username must be at least 3 characters long'
        instance:
          type: string
          example: 'https://losthost:8080/api/users'
  headers:
    RequestId:
      description: The unique request identifier.
      schema:
        type: string
      example: 'f1d4ee7e-7e5a-4d4b-8b9f-2f5c1b1b1a1a'