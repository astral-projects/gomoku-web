package gomoku.http.media

import org.springframework.http.ResponseEntity
import java.net.URI

/**
 * Represents a problem that occurred while processing a request.
 * @param type A URI reference that identifies the problem type.
 * @param title A short, human-readable summary of the problem type.
 * @param status The HTTP status code generated by the origin server for this occurrence of the problem.
 * @param detail A human-readable explanation specific to this occurrence of the problem.
 * @param instance A URI reference that identifies the specific occurrence of the problem.
 * @see <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807</a>
 */
data class Problem(
    val type: URI,
    val title: String,
    val status: Int,
    val detail: String? = null,
    val instance: URI? = null
) {
    fun toResponse() = ResponseEntity
        .status(status)
        .header("Content-Type", MEDIA_TYPE)
        .body<Any>(this)

    companion object {

        const val baseUrl = "https://github.com/2023-daw-leic51d-14/code/jvm/docs/problems/"
        const val MEDIA_TYPE = "application/problem+json"

        val insecurePassword = URI("${baseUrl}insecure-password")
        val invalidRequestContent = URI("${baseUrl}invalid-request-content")
        val gameNotFound = URI("${baseUrl}game-not-found")
        val userAlreadyInLobby = URI("${baseUrl}user-already-in-lobby")
        val userIsNotTheHost = URI("${baseUrl}user-is-not-the-host")
        val invalidMove = URI("${baseUrl}invalid-move")
        val positionTaken = URI("${baseUrl}position-taken")
        val userAlreadyInGame = URI("${baseUrl}user-already-in-game")
        val usernameAlreadyExists = URI("${baseUrl}username-already-exists")
        val emailAlreadyExists = URI("${baseUrl}email-already-exists")
        val userNotFound = URI("${baseUrl}user-not-found")
        val gameVariantNotFound = URI("${baseUrl}game-variant-not-found")
        val tokenIsInvalid = URI("${baseUrl}token-is-invalid")
        val gameAlreadyFinished = URI("${baseUrl}game-already-finished")
        val gameIsInProgress = URI("${baseUrl}game-is-in-progress")
        val invalidId = URI("${baseUrl}invalid-id")
        val invalidOffset = URI("${baseUrl}invalid-offset")
        val invalidLimit = URI("${baseUrl}invalid-limit")
        val invalidEmail = URI("${baseUrl}invalid-email")
        val blankUsername = URI("${baseUrl}blank-username")
        val passwordIsEmpty = URI("${baseUrl}password-is-empty")
        val invalidUsernameLength = URI("${baseUrl}invalid-username-length")
        val gameIsNotInProgress = URI("${baseUrl}game-is-not-in-progress")
        val gameOver = URI("${baseUrl}game-over")
        val notYourNotTurn = URI("${baseUrl}not-your-not-turn")
        val wrongPassword = URI("${baseUrl}wrong-password")
        val usernameDoesNotExist = URI("${baseUrl}username-does-not-exist")
        val userAlreadyNotInLobby = URI("${baseUrl}user-already-not-in-lobby")
        val userDoesntBelongToThisGame = URI("${baseUrl}user-doesnt-belong-to-this-game")
        val userIsInLobby = URI("${baseUrl}user-is-in-lobby")
        val lobbyNotFound = URI("${baseUrl}lobby-not-found")
        val variantsEmpty = URI("${baseUrl}variant-empty")
        // TODO(ADD FILES gameOVer, notYourNotTurn, gameIsNotInProgress)
    }
}
